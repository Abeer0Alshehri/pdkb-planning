

(define (domain grapevine)

    (:agents a b c d)


    (:types loc)
    (:constants )

    (:predicates
            (secret ?agent)
        {AK}(at ?agent - agent ?l - loc)
        {AK}(connected ?l1 ?l2 - loc)
    )

    (:action move
        :derive-condition   always
        :parameters         (?a - agent ?l1 ?l2 - loc)
        :precondition       (and (at ?a ?l1) (connected ?l1 ?l2))
        :effect             (and (at ?a ?l2) (!at ?a ?l1))
    )

    (:action share
        :derive-condition   (at $agent$ ?l)
        :parameters         (?a ?as - agent ?l - loc)
        :precondition       (and (at ?a ?l) [?a](secret ?as))
        :effect             (and
                                (forall ?a2 - agent
                                    (when     (at ?a2 ?l)
                                         [?a2](secret ?as)))
                            )
    )

    (:action fib
        :derive-condition   (at $agent$ ?l)
        :parameters         (?a ?as - agent ?l - loc)
        :precondition       (and (at ?a ?l) [?a](secret ?as))
        :effect             (and
                                (forall ?a2 - agent
                                    (when     (and (at ?a2 ?l) <?a2>(!secret ?as))
                                         [?a2](!secret ?as)))
                            )
    )


)


(define (problem prob-4ag-2g-1d)



    (:domain grapevine)

    (:objects l1 l2 l3 - loc)

    (:projection )
    (:task valid_generation)

    (:init-type complete)
    (:init

        ; Map
        (connected l1 l2)
        (connected l2 l1)
        (connected l2 l3)
        (connected l3 l2)

        ; Agents all in l1
        (forall ?ag - agent (at ?ag l1))

        ; Agents believe their own secret
        (forall ?ag - agent
            [?ag](secret ?ag))
    )

    (:depth 1)

    (:goal
        [b](secret a)
        [c](!secret a)
    )
)
